{"version":3,"sources":["components/Navbar/Navbar.module.scss","containers/App/App.module.scss","components/Main/Main.module.scss","components/Main/MovieList/MovieList.module.scss","components/Main/MovieList/MovieCard/MovieCard.module.scss","components/Main/MovieList/MovieCard/Poster/Poster.module.scss","components/Navbar/Navitem/Navitem.jsx","components/Navbar/index.js","components/Navbar/Navbar.jsx","components/Main/MovieList/MovieCard/Poster/index.js","components/Main/MovieList/MovieCard/Poster/Poster.jsx","components/Main/MovieList/MovieCard/MovieCard.jsx","components/Main/MovieList/index.js","components/Main/MovieList/MovieList.jsx","components/Main/index.js","components/Main/Main.jsx","components/Login/Login.jsx","components/Routes/Router.jsx","containers/App/App.jsx","containers/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Navitem","className","styles","item","onClick","this","props","clickEvent","to","route","name","Component","Navbar","wrapper","overlay","defaultData","list","searchData","map","entry","index","key","filterToggle","Title","Poster","src","data","imgs","MovieCard","centering","Card","style","width","movieData","Body","Text","Year","href","imdbID","Button","variant","MovieList","Cardgrid","finalData","Main","search","Login","Notfound","Routes","noThrow","from","path","default","initialData","App","state","url","searchFilter","filter","e","target","innerText","setState","fetch","catch","err","console","log","then","res","json","myInput","value","Response","controlling","Form","onSubmit","Group","controlId","Control","type","defaultValue","size","placeholder","ref","onChange","handleChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dc63c5df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Navbar_wrapper__1UZ9r\",\"overlay\":\"Navbar_overlay__3d9oY\",\"Navbar\":\"Navbar_Navbar__1nN7S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3XCbV\",\"controlling\":\"App_controlling__NR46q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__3HYok\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cardgrid\":\"MovieList_Cardgrid__3DZ0H\",\"inputForm\":\"MovieList_inputForm__qWgpS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"centering\":\"MovieCard_centering__14aCE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgs\":\"Poster_imgs__BlFL6\"};","import React, { Component } from 'react';\r\nimport styles from './Navitem.module.scss';\r\nimport { Link } from '@reach/router';\r\n\r\nexport default class Navitem extends Component {\r\n    render() {\r\n        return (\r\n            <p className={styles.item}>\r\n                <Link onClick={this.props.clickEvent} to={this.props.route} className={styles.item}>{this.props.name}</Link>\r\n            </p>\r\n        )\r\n    }\r\n}","import Navbar from \"./Navbar\";\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport styles from './Navbar.module.scss';\r\nimport Navitem from './Navitem/Navitem';\r\n\r\nexport default class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <section className={styles.wrapper}>\r\n                \r\n                <div className={styles.overlay}></div>\r\n\r\n                <div className={styles.Navbar}>\r\n                    <h1>OMDB</h1>\r\n                    <Navitem clickEvent={this.props.defaultData} route=\"movielist\" name=\"Movielist\" />\r\n\r\n                    <div className={styles.list}>\r\n                        {this.props.searchData.map((entry, index) => (\r\n                            <p key={index} onClick={(item) => this.props.filterToggle(item)}>{entry.Title}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import Poster from './Poster';\r\n\r\nexport default Poster;","import React, { Component } from 'react';\r\nimport styles from './Poster.module.scss';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default class Poster extends Component {\r\n    render() {\r\n        return (\r\n            <img src={`${this.props.data}`} className={styles.imgs} />\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport styles from './MovieCard.module.scss';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Poster from './Poster';\r\n\r\nexport default class MovieCard extends Component {\r\n    render() {\r\n        return (\r\n            <section className={styles.centering}>\r\n                <Card style={{ width: '18rem' }}>\r\n                    <Poster data={this.props.movieData.Poster} />\r\n                    <Card.Body>\r\n                        <Card.Title>{this.props.movieData.Title}</Card.Title>\r\n                        <Card.Text>\r\n                            {this.props.movieData.Year}\r\n                        </Card.Text>\r\n                        <a href={`https://www.imdb.com/title/${this.props.movieData.imdbID}`}><Button variant=\"primary\">Link</Button></a>\r\n                    </Card.Body>\r\n                </Card>\r\n            </section>\r\n        )\r\n    }\r\n}","import MovieList from \"./MovieList\";\r\n\r\nexport default MovieList;","import React, { Component } from 'react';\r\nimport styles from './MovieList.module.scss';\r\nimport MovieCard from './MovieCard/MovieCard';\r\n\r\n\r\n\r\n\r\nexport default class MovieList extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.textInput = React.createRef();\r\n    // }\r\n\r\n    \r\n   \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Movie List</h1>\r\n                <section className={styles.Cardgrid}>\r\n                    {this.props.finalData.map((entry, index) => (\r\n                        <MovieCard movieData={entry} key={index} />\r\n                    ))}\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}","import Main from './Main';\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport styles from './Main.module.scss';\r\nimport MovieList from \"./MovieList\";\r\n\r\nexport default class Main extends Component {\r\n    render() {\r\n        return (\r\n            <section className={styles.Main}>\r\n                <MovieList finalData={this.props.searchData} search={this.props.search}/>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            <main><h1>Login</h1></main>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Router, Redirect } from '@reach/router';\r\nimport Main from '../../components/Main';\r\nimport Login from '../../components/Login/Login';\r\n\r\nconst Notfound = () => (<h2>Not Found</h2>)\r\n\r\nexport default class Routes extends Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Redirect noThrow from=\"/\" to=\"movielist\" />\r\n                <Main path=\"movielist\" searchData={this.props.searchData} search={this.props.search} />\r\n                <Login path=\"login\" />\r\n                <Notfound default />\r\n            </Router>\r\n        )\r\n    }\r\n};\r\n","import React, { Component } from 'react';\r\nimport Navbar from '../../components/Navbar';\r\nimport Form from 'react-bootstrap/Form';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport styles from \"./App.module.scss\";\r\nimport Routes from '../../components/Routes/Router';\r\n\r\nlet initialData = [];\r\n\r\n\r\nclass App extends Component {\r\n\r\n  \r\n  state = {\r\n    url: 'http://www.omdbapi.com/?s=star&apikey=a3733e00',\r\n    MovieList: []\r\n  }\r\n\r\n  componentDidMount() {\r\n      fetch(this.state.url)\r\n      .catch(err => {console.log(err)})\r\n      .then(res => res.json())\r\n      .then(\r\n          data => {\r\n              this.setState( { MovieList: data['Search'] } );\r\n              initialData = data['Search'];\r\n          }\r\n      )\r\n  }\r\n\r\n  searchFilter = (item) => {\r\n    initialData = [...this.state.MovieList];\r\n    const filter = this.state.MovieList.filter( (e) => {return e.Title === item.target.innerText} )    \r\n    this.setState( { MovieList: filter  } )\r\n  }\r\n\r\n  handleChange() {\r\n    console.log(`http://www.omdbapi.com/?s=${this.myInput.value}&apikey=a3733e00`)\r\n    fetch(`http://www.omdbapi.com/?s=${this.myInput.value}&apikey=a3733e00`)\r\n      .catch(err => {console.log(err)})\r\n      .then(res => res.json())\r\n      .then(\r\n          data => {\r\n              if (data.Response === \"True\") {\r\n                 this.setState( { MovieList: data['Search'] } );\r\n                 initialData = data['Search'];\r\n              }\r\n          }\r\n      )\r\n  }\r\n\r\n  defaultData = () => {\r\n    this.setState( { MovieList: initialData } )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.App}>\r\n        <Navbar searchData={this.state.MovieList} filterToggle={this.searchFilter} defaultData={this.defaultData} />\r\n        <section className={styles.controlling}>\r\n          <Form onSubmit={this.props.search} >\r\n            <Form.Group controlId=\"form-name\">\r\n                <Form.Control type=\"text\" defaultValue=\"\" size=\"lg\" placeholder=\"Search\" ref={ref => { this.myInput = ref; }} onChange={() => this.handleChange()} />\r\n            </Form.Group>\r\n          </Form>\r\n          <Routes searchData={this.state.MovieList} search={this.search} />\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import App from \"./App\";\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}